<?xml version="1.0" encoding="UTF-8"?>
<beans xmlns="http://www.springframework.org/schema/beans"
       xmlns:xsi="http://www.w3.org/2001/XMLSchema-instance"
       xmlns:context="http://www.springframework.org/schema/context"
       xsi:schemaLocation="http://www.springframework.org/schema/beans
        http://www.springframework.org/schema/beans/spring-beans.xsd
        http://www.springframework.org/schema/context
        http://www.springframework.org/schema/context/spring-context.xsd"
       xmlns:p="http://www.springframework.org/schema/p">

    <!--把对象的创建交给spring来管理-->
    <bean id="accountService" class="cn.andyoung.service.impl.AccountServiceImpl"></bean>

    <bean id="accountDao" class="cn.andyoung.dao.impl.AccountDaoImpl"></bean>

    <!-- 此种方式是:使用 StaticFactory 类中的静态方法 createAccountService 创建对象，并存入 spring 容器id 属性：指定 bean 的 id，用于从容器中获取class 属性：指定静态工厂的全限定类名factory-method 属性：指定生产对象的静态方法-->
    <bean id="accountServiceStaticFactory"
          class="cn.andyoung.factory.StaticFactory"
          factory-method="getAccountService"></bean>

    <!-- 此种方式是：
先把工厂的创建交给 spring 来管理。
然后在使用工厂的 bean 来调用里面的方法
factory-bean 属性：用于指定实例工厂 bean 的 id。
factory-method 属性：用于指定实例工厂中创建对象的方法。
-->
    <bean id="instancFactory" class="cn.andyoung.factory.InstanceFactory"></bean>
    <bean id="accountServiceInstancFactory" factory-bean="instancFactory" factory-method="getAccountService"></bean>

    <!--构造函数注入-->
    <bean id="accountServiceC" class="cn.andyoung.service.impl.AccountServiceImpl">
        <constructor-arg name="name" value="张三"></constructor-arg>
        <constructor-arg name="age" value="18"></constructor-arg>
        <constructor-arg name="birthday" ref="now"></constructor-arg>
    </bean>
    <bean id="now" class="java.util.Date"></bean>
    <!--set 方法注入-->
    <bean id="accountServiceP" class="cn.andyoung.service.impl.AccountServiceImpl">
        <property name="name" value="test"></property>
        <property name="age" value="21"></property>
        <property name="birthday" ref="now"></property>
    </bean>

    <!--使用 p 名称空间注入数据（本质还是调用 set 方法）-->
    <bean id="accountServicePshort" class="cn.andyoung.service.impl.AccountServiceImpl"
          p:name="test" p:age="21" p:birthday-ref="now"/>

    <!-- 注入集合属性 -->
    <bean id="accountDaoCC" class="cn.andyoung.dao.impl.AccountDaoImpl">
        <!-- 在注入集合数据时，只要结构相同，标签可以互换 --><!-- 给数组注入数据 -->
        <property name="myStrs">
            <set>
                <value>AAA</value>
                <value>BBB</value>
                <value>CCC</value>
            </set>
        </property>
        <!-- 注入 list 集合数据 -->
        <property name="myList">
            <array>
                <value>AAA</value>
                <value>BBB</value>
                <value>CCC</value>
            </array>
        </property>
        <!-- 注入 set 集合数据 -->
        <property name="mySet">
            <list>
                <value>AAA</value>
                <value>BBB</value>
                <value>CCC</value>
            </list>
        </property>
        <!-- 注入 Map 数据 -->
        <property name="myMap">
            <props>
                <prop key="testA">aaa</prop>
                <prop key="testB">bbb</prop>
            </props>
        </property>
    </bean>

    <!-- 告知 spring 创建容器时要扫描的包 -->
    <context:component-scan base-package="cn.andyoung"></context:component-scan>
</beans>